Future Plans:
	- Add miscellaneous calculations, such as GPA, into a separate menu.
	
Version 1.0 - Release!
	The application is ready for distribution!

Version 0.9 - Final Steps
	Goal: Do the final tests, package the application, and ready for distribution. 

Version 0.8 - Alpha
	Goal: Do a more complete release and fix bugs that arise.

Version 0.7 - Beta
	Goal: Fix bugs, do a limited release.

Version 0.6
	Goal: Polish existing features, get rid of hacks if possible, create help, and publish the Codeplex project.

Version 0.5
	Goal: Add templates, custom calculation modes, and options. Also, improve the editing workflow.

Version 0.4
	Goal: Add file support.
	Change Log:
		.1 - Added save and open functionality (buggy) - medium.
		.2 - Rewrote the calculation system from scratch, changed some of the data classes slightly - large.
		.3 - Created BareMinimumCore and moved all of the data classes into it - medium.
		.4 - Changed the build target to .NET 4.0 - medium.
		.5 - Moved some of the code for calculations to the BareMinimumCore.Calculations static class - small.
			r1 - Fixed an issue with the math (Sections that don't have any Grades to be used in the calculation are now ignore) - medium.
			r2 - Fixed an issue with serialization (the 4.5 targetted version didn't need to serialize Level, but the 4.0 one does) - small.

	Work Items:
		- Add the ability to create new files.

Version 0.3
	Goal: Add the methods that will do the calculations, and make sure they are called at the right times.
	Work Items:
		1. Implemented Scenario.Average and Section.PointsEarned - medium (moved to ItemContainer.PointsEarned with work item 2.2).
		2. Reded the class heirarchy - large.
			1. Changed the Item class to an interface - medium.
			2. Created the ItemContainer class - medium.
			3. Made Section and Scenario inherit from ItemContainer - small.
		3. Added a method to calculate the Weight of each Grade - medium (the method currently never gets called).
			r1. Made the MainWin bigger - small - change.
			r2. Made sure the ScenarioTargetUpDown gets enabled/disabled at the right times - small - fix (actually, I marked this fixed on accident without actually doing it, oops). 
			r3. Added a property to the Grade class that will store its weight in the overall Scenario - small (OverallWeight) - change.
		4. Rewrote the Item.Weight property to be a nullable double - medium.
			1. Wrote ConvertWeightToString - small.
			2. Changed Item.Weight to a nullable double - small - done.
		5. Added a method that will calculate the PointsNeeded of every grade in a Scenario - large - done (CalculateNeeded) (quite buggy).
				r1. Made it impossible to resize the ItemMarkedColumn - small - fix.
			1. Write a method to calculate and store the OverallWeight of each Grade - medium - done (CalculuateOverallGradeWeights).
				r1. Added the Parent property to the Item interface and the Grade/Section classes, and added related functionality to their constructors and the code in MainWin.cs that initializes objects of those types - small - change.
				r2. Added the Level property to the Item interface and the Grade/Section classes, and added relaed functionality to their constructors and the code in MainWin.cs that initializes object of those types - small - change.
			2. Finish implementing CalculateNeeded for the "Even" mode - medium - done. 
				r1. Made sure the ScenarioTargetUpDown got enabled at the correct times (turns out I didn't actually finish in 2.3r2) - small - fix.
		6. Change the way the ScenarioTree renders data, and make the data classes reflect what they store - large - in progress.
			r1. Made sure the ScenarioTree gets refreshed at the right times so it doesn't look sluggish - small - done.
			1. Remove properties from Item that shouldn't be the same type in Section and Grade - small - done.
			2. Rewrite the Grade properties - medium - done.
			3. Rewrite the Section and Scenario properties - medium - done.
			4. Add a method that will render the ItemWeightColumn and remove the string formatter - medium - done (RenderItemWeight).
			5. Add a method that will render the ItemEarnedColumn - medium - done (RenderItemEarned).
			6. Add a method that will write the edited value back into the model for Grade.PointsEarned - small - done (PutPointsEarned).
			7. Add a method that will write the edited value back into the model for Section.Weight - small - done (PutWeight).
			8. Add a method to the ItemContainer class that will calculate the Weight of AutoWeighted sections - small - done (CalculateAutoSectionWeights).
				r1. Fixed an issue with ItemContainer.PointsEarned that caused it to be much larger than the real value when Sections were present in the tree - small - fix.
				r2. Moved MarkedGrades to ItemContainer and modified it, because it needs to traverse the tree to find out - medium - change.
				r3. Fixed an issue with CalculateOverallGradeWeights() that caused it to throw an exception whenever Sections were present in the tree - small - fix.
		7. Fix some of the issues with the current CalculateNeeded() - medium - in progress.
			1. Make sure that CalculateNeeded is called whenever the tree is updated - medium - done.
				(Added INotifyPropertyChanged to the Section class for the Weight property)
				(Made the Grade class throw the PropertyChanged event for PointsPossible and PointsEarned)
				(Added INotifyPropertyChanged to the Scenario class for the Name and Target properties)
				(Implemented the PropertyChanged even for all three classes to call CalculateNeeded when needed)
				r1. Removed the ScenarioTargetUpDown (it's unnecessary and redundant, because you can edit the Scenario's Target from the ScenarioList) - small - change.
				r2. Fixed an issue that made it impossible to edit the Scenario Target from the ScenarioList control - small - fix. 
					(Added an AspectPutter for ScenarioTargetColumn)
				r3. Added an AspectToStringConverter for the ScenarioAverageColumn - small - change.
			2. Make sure the ScenarioList and ScenarioTree are redrawn when needed - small - done.
				(Added ScenarioList.RefreshObject(SelectedScenario) to each of the PropertyChanged events that signal a change in SelectedScenario.Average)
				r1. Added a method to format the PointsNeeded column correctly - small - change.
				r2. Added a method to write the edited value back into the model for Grade.PointsPossible - small - fix. 
			3. Add a method that will return the average of the scenario, not including Grades that are Marked - medium - done (GetAverage()).
				(Added GetAverage() method to ItemContainer)
				(Changed PointsEarned to call GetAverage() internally)
				(Changed CalculateNeeded to use GetAverage() instead of PointsEarned)
			4. Implement the ability to allow ItemContainer.GetAverage() to ignore empty sections (bool treatEmptyAsZero) - medium - done.
				(Added the correct conditionals to GetAverage())
			5. Modify the treatEmptyAsZero functionality so that it can include empty sections if they have empty grades marked - small - done.
				r1. Fixed an issue with CalculateNeeded that makes it calculate the wrong grade with Sections present or a grade in PointsEarned - small - fix.
				r2. Fixed an issue that made the designer shift right-anchored controls in MainSplit.Panel2 to the left - small - fix.
				
	Changes:
		1. Removed the overridden Grade.Weight property, and removed the "virtual" modifier from the Item.Weight property. The Weight for each Grade will be calculated outside the class (see work item 3) - small.
		2. Made the RowHeight of ScenarioList and ScenarioTree 25 pixels (this spaces out the lists and makes them more readable) - small.
		3. Made the Item.Weight property a string so it can be blank for Grades, for now - small.
		4. Added Row decorations for Sections and Grades - medium.
		5. Added a RowBorderDecoration for the selected item on the ScenarioTree - small.
		6. Added a RowBorderDecoration for the hot item on the ScenarioTree - small.
	Fixes:
		1. Made it impossible to perform a deselect on the ScenarioList by adding the ScenarioToReselect property - small.

Version 0.2
	Goal: Finish the GUI.
	Work Items:
		1. Add a NumericUpDown to input the Scenario's target grade - small - done (ScenarioTargetUpDown).
		2. Add a ComboBox to input the type of calculation that should be done - small - done (CalculationTypeComboBox).
		3. Add Buttons to delete Scenarios and Items, and implement them - small - done.
	Changes:
		1. Overloaded DeleteItem() so that you can call it with no arguments.
		2. Rewrote ScenarioTree_KeyDown() to use DeleteItem() without arguments (DeleteItemButton_Click() was written this way from the start).
	Fixes:
		1. Made sure that the two "delete" buttons are enabled/disabled at the right times.

Version 0.1
	Goal: Fix some of the existing GUI problems before moving on.
	Work Items:
		1. Create and finish the ItemMarkedColumn, using Decorations to hide checkboxes on Sections - large - done.
		2. Redo SelectedScenario as a property - small - done.
		3. Add keyboard support to the list and tree, and the ability to delete Scenarios and Items - medium - done.
			1. ScenarioList.KeyDown - small - done.
			2. ScenarioTree.KeyDown - medium - done.
		4. Make sure that the Scenario related buttons are disabled at the right times - medium - done.
			1. When Scenarios are added - small - done.
			2. When Items are added - small - done.
			3. When Scenarios are selected - small - done.
			4. When Items are selected - small - done.
			5. When Scenarios are deleted - small - done.
			6. When Items are deleted - small - done (also resets the Scenario's ItemType if the Scenario is empty).
	Changes:
	1. Changed Scenario.Average property to a string, and marked it as a TODO - small.
	2. Changed from ScenarioTree.Checkboxes = true to ScenarioTree.UseSubItemCheckboxes = true, in order to create the ItemMarkedColumn - small.
	3. Changed ScenarioTree and ScenarioList to use SelectionChanged events instead of SelectedIndexChanged - small.
	4. Moved Scenario deletion code to the new DeleteScenario() method.
	5. Moved Item deletion code to the new DeleteItem() method.
	Fixes:
	1. Fixed an issue that made the ScenarioTree perform atrociously slow with Sections (added the read-only Marked property to Section) - small.
	2. Fixed an issue that crashed BareMinimum whenever a subitem checkbox was checked. For some reason, the TreeListView calls GetChildren when this happens, even though it can only happen on a Grade, which doesn't have any children and thus was not previously handled by the GetChildren method - small.

Version 0.0
	Goal: Finish current work items and set future goals.
	Work Items:
	1. Finish the empty message overlay styling - small - done (opted for simple text).
	2. Set the text for the empty list message - small - done.
	3. Work on implementing each of the currently empty/unfinished event handlers - large - done.
		1. AddGradeButton_Click - medium - done.
		2. AddSectionButton_Click - medium - done.
		3. ScenarioTree_SelectedIndexChanged - small - done.
		4. ScenarioTree_CellEditStarting - small - done (as far as it can be until the ItemMarkedColumn is finished, see v0.2).
		5. ScenarioListView_SelectedIndexChanged - small - done.
	4. Make the Grade class functional for the current usage - small - done.
	5. Implement GetChildren delegate method - small - done.

Initial Reworking
	- Created the Scenario, Item, Section, and Grade classes.
	- Made the Scenario, Item, and Section classes functional for their basic usages.
	- Set up the ScenarioList and ScenarioTree.
	- Added the FileToolbar.
	- Added the AddScenarioButton, AddSectionButton, and AddGradeButton buttons.